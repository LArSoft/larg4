
//#include "seedservice.fcl" 
#no experiment specific configurations because SingleGen is detector agnostic

standard_singlep:
{
 module_type:           "SingleGen" 
 ParticleSelectionMode: "all"       # 0 = use full list, 1 =  randomly select a single listed particle
 PadOutVectors:        false        # false: require all vectors to be same length
                                    # true:  pad out if a vector is size one    
 PDG:                   [ 13 ]      # list of pdg codes for particles to make
 P0:                    [ 6. ]      # central value of momentum for each particle
 SigmaP:                [ 0. ]      # variation about the central value 
 PDist:                 "Gaussian"  # 0 - uniform, 1 - gaussian distribution                               
 X0:                    [ 0. ]     # in cm in world coordinates, ie x = 0 is at the wire plane          
                                    # and increases away from the wire plane                             
 Y0:                    [ 0. ]      # in cm in world coordinates, ie y = 0 is at the center of the TPC   
 Z0:                    [ -130. ]   # in cm in world coordinates, ie z = 0 is at the upstream edge of    
                                    # the TPC and increases with the beam direction                      
 T0:                    [ 0. ]      # starting time
 SigmaX:                [ 0. ]      # variation in the starting x position
 SigmaY:                [ 0. ]      # variation in the starting y position                            
 SigmaZ:                [ 0.0 ]     # variation in the starting z position                            
 SigmaT:                [ 0.0 ]     # variation in the starting time
 PosDist:               "uniform"   # 0 - uniform, 1 - gaussian
 TDist:                 "uniform"   # 0 - uniform, 1 - gaussian         
 Theta0XZ:              [ 0. ]      #angle in XZ plane (degrees)                                         
 Theta0YZ:              [ 0. ]      #angle in YZ plane (degrees)                                         
 SigmaThetaXZ:          [ 0. ]      #in degrees                                                          
 SigmaThetaYZ:          [ 0. ]      #in degrees                                                          
 AngleDist:             "Gaussian"  # 0 - uniform, 1 - gaussian
}

process_name:processA
source: {
  module_type: EmptyEvent
  maxEvents:  1000
}
services: {
  message : {
     debugModules : ["*"]
     suppressInfo : []    
     destinations : {
       LogToConsole : {
         type : "cout" 
         threshold : "DEBUG" 
         categories : {
           default : { limit : 50 }
         }
       }
     }
  }
  TFileService :
  {
    fileName      : "testlarg4.root" 
  }

    DetectorHolder: {}
    ActionHolder: {}
    RandomNumberGenerator: {}
    NuRandomService:{service_type: "NuRandomService" 
      endOfJobSummary: true
      policy: "random" 
}

    PhysicsListHolder: {} 
    PhysicsList: { 
    PhysicsListName: "FTFP_BERT" 
    DumpList: false    
      enableCerenkov: false
      enableScintillation: false
    ScintillationByParticleType: false
      enableAbsorption: false   
      enableRayleigh: false     
      enableMieHG: false       
      enableBoundary: false    
      enableWLS: false
}

    // Detector(s) for the simulation
    LArG4Detector : 
    {
    category: "world" 
    gdmlFileName_ : "lArDet_split.gdml" 
    }   

//    writeGdml: {
//      name: "writeGdml" 
//      gdmlFileName:"output.gdml"    
//    }

    ExampleGeneralAction: {
      name: "exampleGeneral" 
    }
MCTruthEventAction: {service_type: "MCTruthEventActionService"}
ParticleListAction: {service_type: "ParticleListActionService"}
}

outputs: {
out1: {
  module_type: RootOutput   
  fileName: "Testingout.root" 
  }
}

physics: {
  producers: {
   generator: @local::standard_singlep
    larg4Main: {  
      module_type: larg4Main
      enableVisualization: false
      macroPath: ".:./macros" 
      visMacro: "vis.mac" 
      //afterEvent: pause
    }

  }
  analyzers: {
   CheckSimEnergyDeposit: {   module_type: CheckSimEnergyDeposit
          hist_dir: "HistoDir" 
          }
   CheckMCParticle: {   module_type: CheckMCParticle
          hist_dir: "HistoDir2" 
          }
  CheckAuxDetHit: {   module_type: CheckAuxDetHit
          hist_dir: "HistoDir3" 
          }

}

  path1: [ generator,larg4Main ]
  stream1:  [ out1,CheckSimEnergyDeposit,CheckMCParticle,CheckAuxDetHit]

  trigger_paths: [ path1 ]
  end_paths: [ stream1 ]
}
